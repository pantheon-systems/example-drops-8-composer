#!/bin/bash

# Exit immediately on errors, and echo commands as they are executed.
set -ex

TERMINUS_ENV_LABEL=${TERMINUS_ENV_LABEL:-$TERMINUS_ENV}

# Add a remote named 'pantheon' to point at the Pantheon site's git repository.
# Skip this step if the remote is already there (e.g. due to CI service caching).
git remote show | grep -q pantheon || git remote add pantheon $(terminus connection:info $TERMINUS_SITE.$TERMINUS_ENV --field=git_url --env=dev)
git fetch pantheon

# If we are testing against the dev environment, then simply force-push our build results to the master branch and exit.
if [ "$TERMINUS_ENV" == "dev" ]
then
  terminus connection:set $TERMINUS_SITE.$TERMINUS_ENV sftp
  PANTHEON_SITE_ID=$(terminus site:info $TERMINUS_SITE --field=id)
  rsync -rlIvz --ipv4 --exclude=.git -e 'ssh -p 2222' ./ $TERMINUS_ENV.$PANTHEON_SITE_ID@appserver.$TERMINUS_ENV.$PANTHEON_SITE_ID.drush.in:code/
  exit 0
fi

# Create a new branch and commit the results from anything that may have changed
git checkout -B $TERMINUS_ENV
git add -A .
git commit -q -m "Build assets for $TERMINUS_ENV_LABEL."

# Push the branch to Pantheon, and create a new environment for it
git push -q pantheon $TERMINUS_ENV

# Create a new environment for this test.
terminus multidev:create $TERMINUS_SITE.dev $TERMINUS_ENV
terminus connection:set $TERMINUS_SITE.$TERMINUS_ENV sftp
